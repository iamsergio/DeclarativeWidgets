import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump QtWidgets 1.0'
//
// qmlplugindump is deprecated! You should use qmltyperegistrar instead.

Module {
    Component {
        name: "AbstractDeclarativeObject"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["QmlContext 1.0"]

        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "DeclarativeAction"
        defaultProperty: "data"
        prototype: "QAction"
        exports: ["Action 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "DeclarativeActionItem"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["ActionItem 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "action"; type: "QVariant" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "DeclarativeBoxLayoutAttached"
        prototype: "QObject"
        Property { name: "stretch"; type: "int" }
        Property { name: "alignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Signal {
            name: "stretchChanged"
            Parameter { name: "stretch"; type: "int" }
        }
        Signal {
            name: "alignmentChanged"
            Parameter { name: "alignment"; type: "Qt::Alignment" }
        }
    }
    Component {
        name: "DeclarativeColorDialog"
        defaultProperty: "data"
        prototype: "QColorDialog"
        exports: ["ColorDialog 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeColorDialogAttached"
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "DeclarativeColorDialogAttached"
        prototype: "StaticDialogMethodAttached"
        Property { name: "title"; type: "string" }
        Property { name: "options"; type: "uint" }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "optionsChanged"
            Parameter { name: "options"; type: "int" }
        }
        Method { name: "getColor"; type: "QColor" }
        Method {
            name: "getColor"
            type: "QColor"
            Parameter { name: "initialColor"; type: "QColor" }
        }
    }
    Component {
        name: "DeclarativeFileDialog"
        defaultProperty: "data"
        prototype: "QFileDialog"
        exports: ["FileDialog 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeFileDialogAttached"
        Property { name: "selectedFiles"; type: "QStringList"; isReadonly: true }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "DeclarativeFileDialogAttached"
        prototype: "StaticDialogMethodAttached"
        Property { name: "caption"; type: "string" }
        Property { name: "dir"; type: "string" }
        Property { name: "nameFilters"; type: "QStringList" }
        Property { name: "options"; type: "int" }
        Property { name: "selectedFilter"; type: "string"; isReadonly: true }
        Signal {
            name: "captionChanged"
            Parameter { name: "caption"; type: "string" }
        }
        Signal {
            name: "dirChanged"
            Parameter { name: "dir"; type: "string" }
        }
        Signal {
            name: "nameFiltersChanged"
            Parameter { name: "filters"; type: "QStringList" }
        }
        Signal {
            name: "optionsChanged"
            Parameter { name: "options"; type: "int" }
        }
        Signal {
            name: "selectedFilterChanged"
            Parameter { name: "filter"; type: "string" }
        }
        Method { name: "getExistingDirectory"; type: "string" }
        Method { name: "getOpenFileName"; type: "string" }
        Method { name: "getOpenFileNames"; type: "QStringList" }
        Method { name: "getSaveFileName"; type: "string" }
    }
    Component {
        name: "DeclarativeFontDialog"
        defaultProperty: "data"
        prototype: "QFontDialog"
        exports: ["FontDialog 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeFontDialogAttached"
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "DeclarativeFontDialogAttached"
        prototype: "StaticDialogMethodAttached"
        Property { name: "title"; type: "string" }
        Property { name: "ok"; type: "bool"; isReadonly: true }
        Property { name: "options"; type: "uint" }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "dialogAcceptedChanged"
            Parameter { name: "accepted"; type: "bool" }
        }
        Signal {
            name: "optionsChanged"
            Parameter { name: "options"; type: "int" }
        }
        Method { name: "getFont"; type: "QFont" }
        Method {
            name: "getFont"
            type: "QFont"
            Parameter { name: "fontFamily"; type: "string" }
        }
    }
    Component {
        name: "DeclarativeFormLayout"
        defaultProperty: "data"
        prototype: "QFormLayout"
        exports: ["FormLayout 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeFormLayoutAttached"
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property {
            name: "contentsMargins"
            revision: 256
            type: "DeclarativeLayoutContentsMargins"
            isReadonly: true
            isPointer: true
        }
        Property { name: "margin"; revision: 256; type: "int" }
    }
    Component {
        name: "DeclarativeFormLayoutAttached"
        prototype: "QObject"
        Property { name: "label"; type: "string" }
        Signal {
            name: "labelChanged"
            Parameter { name: "label"; type: "string" }
        }
    }
    Component {
        name: "DeclarativeGridLayout"
        defaultProperty: "data"
        prototype: "QGridLayout"
        exports: ["GridLayout 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeGridLayoutAttached"
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property {
            name: "contentsMargins"
            revision: 256
            type: "DeclarativeLayoutContentsMargins"
            isReadonly: true
            isPointer: true
        }
        Property { name: "margin"; revision: 256; type: "int" }
    }
    Component {
        name: "DeclarativeGridLayoutAttached"
        prototype: "QObject"
        Property { name: "row"; type: "int" }
        Property { name: "column"; type: "int" }
        Property { name: "rowSpan"; type: "int" }
        Property { name: "columnSpan"; type: "int" }
        Property { name: "alignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Signal {
            name: "rowChanged"
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnChanged"
            Parameter { name: "column"; type: "int" }
        }
        Signal {
            name: "rowSpanChanged"
            Parameter { name: "rowSpan"; type: "int" }
        }
        Signal {
            name: "columnSpanChanged"
            Parameter { name: "columnSpan"; type: "int" }
        }
        Signal {
            name: "alignmentChanged"
            Parameter { name: "alignment"; type: "Qt::Alignment" }
        }
    }
    Component {
        name: "DeclarativeHBoxLayout"
        defaultProperty: "data"
        prototype: "QHBoxLayout"
        exports: ["HBoxLayout 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeBoxLayoutAttached"
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property {
            name: "contentsMargins"
            revision: 256
            type: "DeclarativeLayoutContentsMargins"
            isReadonly: true
            isPointer: true
        }
        Property { name: "margin"; revision: 256; type: "int" }
    }
    Component {
        name: "DeclarativeIcon"
        prototype: "QObject"
        exports: ["Icon 1.0"]

        attachedType: "DeclarativeIconAttached"
        Property { name: "icon"; type: "QIcon" }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "isNull"; type: "bool"; isReadonly: true }
        Signal {
            name: "iconChanged"
            Parameter { name: "icon"; type: "QIcon" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "isNullChanged"
            Parameter { name: "isNull"; type: "bool" }
        }
    }
    Component {
        name: "DeclarativeIconAttached"
        prototype: "QObject"
        Property { name: "themeName"; type: "string" }
        Property { name: "themeSearchPaths"; type: "QStringList" }
        Signal {
            name: "themeNameChanged"
            Parameter { name: "themeName"; type: "string" }
        }
        Signal {
            name: "themeSearchPathsChanged"
            Parameter { name: "themeSearchPaths"; type: "QStringList" }
        }
        Method {
            name: "fromTheme"
            type: "QIcon"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "fromFileName"
            type: "QIcon"
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "DeclarativeInputDialog"
        defaultProperty: "data"
        prototype: "QInputDialog"
        exports: ["InputDialog 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeInputDialogAttached"
        Property { name: "inputMode"; type: "QInputDialog::InputMode" }
        Property { name: "labelText"; type: "string" }
        Property { name: "options"; type: "QFlags<QInputDialog::InputDialogOption>" }
        Property { name: "textValue"; type: "string" }
        Property { name: "intValue"; type: "int" }
        Property { name: "doubleValue"; type: "int" }
        Property { name: "textEchoMode"; type: "QLineEdit::EchoMode" }
        Property { name: "comboBoxEditable"; type: "bool" }
        Property { name: "comboBoxItems"; type: "QStringList" }
        Property { name: "intMinimum"; type: "int" }
        Property { name: "intMaximum"; type: "int" }
        Property { name: "intStep"; type: "int" }
        Property { name: "doubleMinimum"; type: "double" }
        Property { name: "doubleMaximum"; type: "double" }
        Property { name: "doubleDecimals"; type: "int" }
        Property { name: "okButtonText"; type: "string" }
        Property { name: "cancelButtonText"; type: "string" }
        Signal { name: "customTextValueChanged" }
        Signal { name: "customIntValueChanged" }
        Signal { name: "customDoubleValueChanged" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "DeclarativeInputDialogAttached"
        prototype: "StaticDialogMethodAttached"
        Property { name: "title"; type: "string" }
        Property { name: "label"; type: "string" }
        Property { name: "ok"; type: "bool"; isReadonly: true }
        Property { name: "value"; type: "QVariant" }
        Property { name: "min"; type: "QVariant" }
        Property { name: "max"; type: "QVariant" }
        Property { name: "decimals"; type: "int" }
        Property { name: "step"; type: "int" }
        Property { name: "current"; type: "int" }
        Property { name: "editable"; type: "bool" }
        Property { name: "echoMode"; type: "QLineEdit::EchoMode" }
        Property { name: "text"; type: "string" }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "labelChanged"
            Parameter { name: "label"; type: "string" }
        }
        Signal {
            name: "dialogAcceptedChanged"
            Parameter { name: "accepted"; type: "bool" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal {
            name: "minChanged"
            Parameter { name: "min"; type: "QVariant" }
        }
        Signal {
            name: "maxChanged"
            Parameter { name: "max"; type: "QVariant" }
        }
        Signal {
            name: "decimalsChanged"
            Parameter { name: "decimals"; type: "int" }
        }
        Signal {
            name: "stepChanged"
            Parameter { name: "step"; type: "int" }
        }
        Signal {
            name: "currentItemChanged"
            Parameter { name: "current"; type: "int" }
        }
        Signal {
            name: "itemsEditableChanged"
            Parameter { name: "editable"; type: "bool" }
        }
        Signal {
            name: "echoModeChanged"
            Parameter { name: "echoMode"; type: "QLineEdit::EchoMode" }
        }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "getDouble"; type: "double" }
        Method { name: "getInt"; type: "int" }
        Method {
            name: "getItem"
            type: "string"
            Parameter { name: "items"; type: "QStringList" }
        }
        Method { name: "getText"; type: "string" }
    }
    Component {
        name: "DeclarativeLayoutContentsMargins"
        prototype: "QObject"
        exports: ["LayoutContentMargins 1.0"]
        isCreatable: false

        Property { name: "left"; type: "int" }
        Property { name: "top"; type: "int" }
        Property { name: "right"; type: "int" }
        Property { name: "bottom"; type: "int" }
        Signal { name: "marginsChanged" }
    }
    Component {
        name: "DeclarativeLine"
        defaultProperty: "data"
        prototype: "QFrame"
        exports: ["Line 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "orientation"; type: "Qt::Orientation" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "DeclarativeLoaderWidget"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["LoaderWidget 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "source"; type: "QUrl" }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "DeclarativeMessageBox"
        defaultProperty: "data"
        prototype: "QMessageBox"
        exports: ["MessageBox 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeMessageBoxAttached"
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "DeclarativeMessageBoxAttached"
        prototype: "StaticDialogMethodAttached"
        Property { name: "buttons"; type: "int" }
        Property { name: "defaultButton"; type: "int" }
        Signal {
            name: "buttonsChanged"
            Parameter { name: "buttons"; type: "int" }
        }
        Signal {
            name: "defaultButtonChanged"
            Parameter { name: "defaultButton"; type: "int" }
        }
        Method {
            name: "about"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "aboutQt" }
        Method {
            name: "aboutQt"
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "critical"
            type: "int"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "information"
            type: "int"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "question"
            type: "int"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "warning"
            type: "int"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
    }
    Component {
        name: "DeclarativePixmap"
        prototype: "QObject"
        exports: ["Pixmap 1.0"]

        attachedType: "DeclarativePixmapAttached"
        Property { name: "Pixmap"; type: "QPixmap" }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "isNull"; type: "bool"; isReadonly: true }
        Signal {
            name: "pixmapChanged"
            Parameter { name: "Pixmap"; type: "QPixmap" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "height"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "width"; type: "int" }
        }
        Signal {
            name: "isNullChanged"
            Parameter { name: "isNull"; type: "bool" }
        }
    }
    Component {
        name: "DeclarativePixmapAttached"
        prototype: "QObject"
        Method {
            name: "fromFileName"
            type: "QPixmap"
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "DeclarativeQmlContextProperty"
        prototype: "QObject"
        exports: ["QmlContextProperty 1.0"]

        Property { name: "name"; type: "string" }
        Property { name: "value"; type: "QVariant" }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        name: "DeclarativeSeparator"
        defaultProperty: "data"
        prototype: "QAction"
        exports: ["Separator 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "DeclarativeSizePolicy"
        prototype: "QObject"
        exports: ["SizePolicy 1.0"]
        isCreatable: false

        Enum {
            name: "Policy"
            values: {
                "Fixed": 0,
                "Minimum": 1,
                "Maximum": 4,
                "Preferred": 5,
                "MinimumExpanding": 3,
                "Expanding": 7,
                "Ignored": 13
            }
        }
        Enum {
            name: "ControlType"
            values: {
                "DefaultType": 1,
                "ButtonBox": 2,
                "CheckBox": 4,
                "ComboBox": 8,
                "Frame": 16,
                "GroupBox": 32,
                "Label": 64,
                "Line": 128,
                "LineEdit": 256,
                "PushButton": 512,
                "RadioButton": 1024,
                "Slider": 2048,
                "SpinBox": 4096,
                "TabWidget": 8192,
                "ToolButton": 16384
            }
        }
        Enum {
            name: "ControlTypes"
            values: {
                "DefaultType": 1,
                "ButtonBox": 2,
                "CheckBox": 4,
                "ComboBox": 8,
                "Frame": 16,
                "GroupBox": 32,
                "Label": 64,
                "Line": 128,
                "LineEdit": 256,
                "PushButton": 512,
                "RadioButton": 1024,
                "Slider": 2048,
                "SpinBox": 4096,
                "TabWidget": 8192,
                "ToolButton": 16384
            }
        }
        Property { name: "controlType"; type: "DeclarativeSizePolicy::ControlType" }
        Property { name: "horizontalPolicy"; type: "DeclarativeSizePolicy::Policy" }
        Property { name: "verticalPolicy"; type: "DeclarativeSizePolicy::Policy" }
        Property { name: "expandingDirections"; type: "QFlags<Qt::Orientation>"; isReadonly: true }
        Property { name: "hasHeightForWidth"; type: "bool" }
        Property { name: "hasWidthForHeight"; type: "bool" }
        Property { name: "horizontalStretch"; type: "int" }
        Property { name: "verticalStretch"; type: "int" }
        Property { name: "retainSizeWhenHidden"; type: "bool" }
        Signal {
            name: "controlTypeChanged"
            Parameter { name: "controlType"; type: "ControlType" }
        }
        Signal {
            name: "horizontalPolicyChanged"
            Parameter { name: "horizontalPolicy"; type: "Policy" }
        }
        Signal {
            name: "verticalPolicyChanged"
            Parameter { name: "verticalPolicy"; type: "Policy" }
        }
        Signal {
            name: "expandingDirectionsChanged"
            Parameter { name: "expandingDirections"; type: "Qt::Orientations" }
        }
        Signal {
            name: "hasHeightForWidthChanged"
            Parameter { name: "hasHeightForWidth"; type: "bool" }
        }
        Signal {
            name: "hasWidthForHeightChanged"
            Parameter { name: "hasWidthForHeight"; type: "bool" }
        }
        Signal {
            name: "horizontalStretchChanged"
            Parameter { name: "horizontalStretch"; type: "int" }
        }
        Signal {
            name: "verticalStretchChanged"
            Parameter { name: "verticalStretch"; type: "int" }
        }
        Signal {
            name: "retainSizeWhenHiddenChanged"
            Parameter { name: "retainSizeWhenHidden"; type: "bool" }
        }
        Method {
            name: "setControlType"
            Parameter { name: "controlType"; type: "ControlType" }
        }
        Method {
            name: "setHorizontalPolicy"
            Parameter { name: "horizontalPolicy"; type: "Policy" }
        }
        Method {
            name: "setVerticalPolicy"
            Parameter { name: "verticalPolicy"; type: "Policy" }
        }
        Method {
            name: "setHeightForWidth"
            Parameter { name: "heightForWidth"; type: "bool" }
        }
        Method {
            name: "setWidthForHeight"
            Parameter { name: "widthForHeight"; type: "bool" }
        }
        Method {
            name: "setHorizontalStretch"
            Parameter { name: "horizontalStretch"; type: "int" }
        }
        Method {
            name: "setVerticalStretch"
            Parameter { name: "verticalStretch"; type: "int" }
        }
        Method {
            name: "setRetainSizeWhenHidden"
            Parameter { name: "retainSizeWhenHidden"; type: "bool" }
        }
    }
    Component {
        name: "DeclarativeSpacerItem"
        prototype: "QObject"
        exports: ["Spacer 1.0"]

        Enum {
            name: "SizePolicy"
            values: {
                "Fixed": 0,
                "Minimum": 1,
                "Maximum": 4,
                "Preferred": 5,
                "Expanding": 7,
                "MinimumExpanding": 3,
                "Ignored": 13
            }
        }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "sizeHint"; type: "QSize" }
        Property { name: "horizontalSizePolicy"; type: "DeclarativeSpacerItem::SizePolicy" }
        Property { name: "verticalSizePolicy"; type: "DeclarativeSpacerItem::SizePolicy" }
        Signal {
            name: "widthChanged"
            Parameter { name: "width"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "height"; type: "int" }
        }
        Signal { name: "horizontalPolicyChanged" }
        Signal { name: "verticalPolicyChanged" }
    }
    Component {
        name: "DeclarativeStackedLayout"
        defaultProperty: "data"
        prototype: "QStackedLayout"
        exports: ["StackedLayout 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property {
            name: "contentsMargins"
            revision: 256
            type: "DeclarativeLayoutContentsMargins"
            isReadonly: true
            isPointer: true
        }
        Property { name: "count"; revision: 256; type: "int"; isReadonly: true }
        Property { name: "margin"; revision: 256; type: "int" }
    }
    Component {
        name: "DeclarativeStatusBar"
        defaultProperty: "data"
        prototype: "QStatusBar"
        exports: ["StatusBar 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeStatusBarAttached"
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "DeclarativeStatusBarAttached"
        prototype: "QObject"
        Property { name: "stretch"; type: "int" }
    }
    Component {
        name: "DeclarativeTabStops"
        prototype: "QObject"
        exports: ["TabStops 1.0"]

        Property { name: "tabStops"; type: "QVariantList" }
    }
    Component {
        name: "DeclarativeTabWidget"
        defaultProperty: "data"
        prototype: "QTabWidget"
        exports: ["TabWidget 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeTabWidgetAttached"
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "DeclarativeTabWidgetAttached"
        prototype: "QObject"
        Property { name: "label"; type: "string" }
        Property { name: "icon"; type: "QIcon" }
        Signal {
            name: "labelChanged"
            Parameter { name: "label"; type: "string" }
        }
        Signal {
            name: "iconChanged"
            Parameter { name: "icon"; type: "QIcon" }
        }
    }
    Component {
        name: "DeclarativeVBoxLayout"
        defaultProperty: "data"
        prototype: "QVBoxLayout"
        exports: ["VBoxLayout 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "DeclarativeBoxLayoutAttached"
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property {
            name: "contentsMargins"
            revision: 256
            type: "DeclarativeLayoutContentsMargins"
            isReadonly: true
            isPointer: true
        }
        Property { name: "margin"; revision: 256; type: "int" }
    }
    Component {
        name: "Dialog"
        defaultProperty: "data"
        prototype: "QDialog"
        exports: ["Dialog 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "Menu"
        defaultProperty: "data"
        prototype: "QMenu"
        exports: ["Menu 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QAbstractButton"
        prototype: "QWidget"
        Property { name: "text"; type: "string" }
        Property { name: "icon"; type: "QIcon" }
        Property { name: "iconSize"; type: "QSize" }
        Property { name: "shortcut"; type: "QKeySequence" }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "autoRepeat"; type: "bool" }
        Property { name: "autoExclusive"; type: "bool" }
        Property { name: "autoRepeatDelay"; type: "int" }
        Property { name: "autoRepeatInterval"; type: "int" }
        Property { name: "down"; type: "bool" }
        Signal { name: "pressed" }
        Signal { name: "released" }
        Signal {
            name: "clicked"
            Parameter { name: "checked"; type: "bool" }
        }
        Signal { name: "clicked" }
        Signal {
            name: "toggled"
            Parameter { name: "checked"; type: "bool" }
        }
        Method {
            name: "setIconSize"
            Parameter { name: "size"; type: "QSize" }
        }
        Method { name: "animateClick" }
        Method { name: "click" }
        Method { name: "toggle" }
        Method {
            name: "setChecked"
            Parameter { type: "bool" }
        }
    }
    Component {
        name: "QAbstractItemDelegate"
        prototype: "QObject"
        Signal {
            name: "commitData"
            Parameter { name: "editor"; type: "QWidget"; isPointer: true }
        }
        Signal {
            name: "closeEditor"
            Parameter { name: "editor"; type: "QWidget"; isPointer: true }
            Parameter { name: "hint"; type: "QAbstractItemDelegate::EndEditHint" }
        }
        Signal {
            name: "closeEditor"
            Parameter { name: "editor"; type: "QWidget"; isPointer: true }
        }
        Signal {
            name: "sizeHintChanged"
            Parameter { type: "QModelIndex" }
        }
    }
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Enum {
            name: "CheckIndexOption"
            values: {
                "NoOption": 0,
                "IndexIsValid": 1,
                "DoNotUseParent": 2,
                "ParentIsInvalid": 4
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QList<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "insertRows"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "insertRows"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "insertColumns"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "insertColumns"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "removeRows"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "removeRows"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "removeColumns"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "removeColumns"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "moveRows"
            revision: 1540
            type: "bool"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceRow"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationChild"; type: "int" }
        }
        Method {
            name: "moveColumns"
            revision: 1540
            type: "bool"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceColumn"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationChild"; type: "int" }
        }
        Method {
            name: "insertRow"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "insertRow"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "insertColumn"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "insertColumn"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "removeRow"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "removeRow"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "removeColumn"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "removeColumn"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "moveRow"
            revision: 1540
            type: "bool"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceRow"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationChild"; type: "int" }
        }
        Method {
            name: "moveColumn"
            revision: 1540
            type: "bool"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceColumn"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationChild"; type: "int" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "sort"
            revision: 1540
            Parameter { name: "column"; type: "int" }
            Parameter { name: "order"; type: "Qt::SortOrder" }
        }
        Method {
            name: "sort"
            revision: 1540
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        name: "QAbstractItemView"
        prototype: "QAbstractScrollArea"
        Enum {
            name: "SelectionMode"
            values: {
                "NoSelection": 0,
                "SingleSelection": 1,
                "MultiSelection": 2,
                "ExtendedSelection": 3,
                "ContiguousSelection": 4
            }
        }
        Enum {
            name: "SelectionBehavior"
            values: {
                "SelectItems": 0,
                "SelectRows": 1,
                "SelectColumns": 2
            }
        }
        Enum {
            name: "ScrollHint"
            values: {
                "EnsureVisible": 0,
                "PositionAtTop": 1,
                "PositionAtBottom": 2,
                "PositionAtCenter": 3
            }
        }
        Enum {
            name: "EditTriggers"
            values: {
                "NoEditTriggers": 0,
                "CurrentChanged": 1,
                "DoubleClicked": 2,
                "SelectedClicked": 4,
                "EditKeyPressed": 8,
                "AnyKeyPressed": 16,
                "AllEditTriggers": 31
            }
        }
        Enum {
            name: "ScrollMode"
            values: {
                "ScrollPerItem": 0,
                "ScrollPerPixel": 1
            }
        }
        Enum {
            name: "DragDropMode"
            values: {
                "NoDragDrop": 0,
                "DragOnly": 1,
                "DropOnly": 2,
                "DragDrop": 3,
                "InternalMove": 4
            }
        }
        Property { name: "autoScroll"; type: "bool" }
        Property { name: "autoScrollMargin"; type: "int" }
        Property { name: "editTriggers"; type: "QFlags<QAbstractItemView::EditTrigger>" }
        Property { name: "tabKeyNavigation"; type: "bool" }
        Property { name: "showDropIndicator"; type: "bool" }
        Property { name: "dragEnabled"; type: "bool" }
        Property { name: "dragDropOverwriteMode"; type: "bool" }
        Property { name: "dragDropMode"; type: "QAbstractItemView::DragDropMode" }
        Property { name: "defaultDropAction"; type: "Qt::DropAction" }
        Property { name: "alternatingRowColors"; type: "bool" }
        Property { name: "selectionMode"; type: "QAbstractItemView::SelectionMode" }
        Property { name: "selectionBehavior"; type: "QAbstractItemView::SelectionBehavior" }
        Property { name: "iconSize"; type: "QSize" }
        Property { name: "textElideMode"; type: "Qt::TextElideMode" }
        Property { name: "verticalScrollMode"; type: "QAbstractItemView::ScrollMode" }
        Property { name: "horizontalScrollMode"; type: "QAbstractItemView::ScrollMode" }
        Signal {
            name: "pressed"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "clicked"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "doubleClicked"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "activated"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "entered"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal { name: "viewportEntered" }
        Signal {
            name: "iconSizeChanged"
            Parameter { name: "size"; type: "QSize" }
        }
        Method { name: "reset" }
        Method {
            name: "setRootIndex"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method { name: "doItemsLayout" }
        Method { name: "selectAll" }
        Method {
            name: "edit"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method { name: "clearSelection" }
        Method {
            name: "setCurrentIndex"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method { name: "scrollToTop" }
        Method { name: "scrollToBottom" }
        Method {
            name: "update"
            Parameter { name: "index"; type: "QModelIndex" }
        }
    }
    Component {
        name: "QAbstractScrollArea"
        prototype: "QFrame"
        Enum {
            name: "SizeAdjustPolicy"
            values: {
                "AdjustIgnored": 0,
                "AdjustToContentsOnFirstShow": 1,
                "AdjustToContents": 2
            }
        }
        Property { name: "verticalScrollBarPolicy"; type: "Qt::ScrollBarPolicy" }
        Property { name: "horizontalScrollBarPolicy"; type: "Qt::ScrollBarPolicy" }
        Property { name: "sizeAdjustPolicy"; type: "QAbstractScrollArea::SizeAdjustPolicy" }
    }
    Component {
        name: "QAbstractSlider"
        prototype: "QWidget"
        Property { name: "minimum"; type: "int" }
        Property { name: "maximum"; type: "int" }
        Property { name: "singleStep"; type: "int" }
        Property { name: "pageStep"; type: "int" }
        Property { name: "value"; type: "int" }
        Property { name: "sliderPosition"; type: "int" }
        Property { name: "tracking"; type: "bool" }
        Property { name: "orientation"; type: "Qt::Orientation" }
        Property { name: "invertedAppearance"; type: "bool" }
        Property { name: "invertedControls"; type: "bool" }
        Property { name: "sliderDown"; type: "bool" }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal { name: "sliderPressed" }
        Signal {
            name: "sliderMoved"
            Parameter { name: "position"; type: "int" }
        }
        Signal { name: "sliderReleased" }
        Signal {
            name: "rangeChanged"
            Parameter { name: "min"; type: "int" }
            Parameter { name: "max"; type: "int" }
        }
        Signal {
            name: "actionTriggered"
            Parameter { name: "action"; type: "int" }
        }
        Method {
            name: "setValue"
            Parameter { type: "int" }
        }
        Method {
            name: "setOrientation"
            Parameter { type: "Qt::Orientation" }
        }
        Method {
            name: "setRange"
            Parameter { name: "min"; type: "int" }
            Parameter { name: "max"; type: "int" }
        }
    }
    Component {
        name: "QAbstractSpinBox"
        prototype: "QWidget"
        Enum {
            name: "ButtonSymbols"
            values: {
                "UpDownArrows": 0,
                "PlusMinus": 1,
                "NoButtons": 2
            }
        }
        Enum {
            name: "CorrectionMode"
            values: {
                "CorrectToPreviousValue": 0,
                "CorrectToNearestValue": 1
            }
        }
        Enum {
            name: "StepType"
            values: {
                "DefaultStepType": 0,
                "AdaptiveDecimalStepType": 1
            }
        }
        Property { name: "wrapping"; type: "bool" }
        Property { name: "frame"; type: "bool" }
        Property { name: "alignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Property { name: "readOnly"; type: "bool" }
        Property { name: "buttonSymbols"; type: "QAbstractSpinBox::ButtonSymbols" }
        Property { name: "specialValueText"; type: "string" }
        Property { name: "text"; type: "string"; isReadonly: true }
        Property { name: "accelerated"; type: "bool" }
        Property { name: "correctionMode"; type: "QAbstractSpinBox::CorrectionMode" }
        Property { name: "acceptableInput"; type: "bool"; isReadonly: true }
        Property { name: "keyboardTracking"; type: "bool" }
        Property { name: "showGroupSeparator"; type: "bool" }
        Signal { name: "editingFinished" }
        Method { name: "stepUp" }
        Method { name: "stepDown" }
        Method { name: "selectAll" }
        Method { name: "clear" }
    }
    Component {
        name: "QAction"
        prototype: "QObject"
        Enum {
            name: "MenuRole"
            values: {
                "NoRole": 0,
                "TextHeuristicRole": 1,
                "ApplicationSpecificRole": 2,
                "AboutQtRole": 3,
                "AboutRole": 4,
                "PreferencesRole": 5,
                "QuitRole": 6
            }
        }
        Enum {
            name: "Priority"
            values: {
                "LowPriority": 0,
                "NormalPriority": 128,
                "HighPriority": 256
            }
        }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "icon"; type: "QIcon" }
        Property { name: "text"; type: "string" }
        Property { name: "iconText"; type: "string" }
        Property { name: "toolTip"; type: "string" }
        Property { name: "statusTip"; type: "string" }
        Property { name: "whatsThis"; type: "string" }
        Property { name: "font"; type: "QFont" }
        Property { name: "shortcut"; type: "QKeySequence" }
        Property { name: "shortcutContext"; type: "Qt::ShortcutContext" }
        Property { name: "autoRepeat"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "menuRole"; type: "QAction::MenuRole" }
        Property { name: "iconVisibleInMenu"; type: "bool" }
        Property { name: "shortcutVisibleInContextMenu"; type: "bool" }
        Property { name: "priority"; type: "QAction::Priority" }
        Signal { name: "changed" }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "checkableChanged"
            Parameter { name: "checkable"; type: "bool" }
        }
        Signal {
            name: "triggered"
            Parameter { name: "checked"; type: "bool" }
        }
        Signal { name: "triggered" }
        Signal { name: "hovered" }
        Signal {
            name: "toggled"
            Parameter { type: "bool" }
        }
        Method { name: "trigger" }
        Method { name: "hover" }
        Method {
            name: "setChecked"
            Parameter { type: "bool" }
        }
        Method { name: "toggle" }
        Method {
            name: "setEnabled"
            Parameter { type: "bool" }
        }
        Method { name: "resetEnabled" }
        Method {
            name: "setDisabled"
            Parameter { name: "b"; type: "bool" }
        }
        Method {
            name: "setVisible"
            Parameter { type: "bool" }
        }
    }
    Component { name: "QBoxLayout"; prototype: "QLayout" }
    Component {
        name: "QButtonGroup"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["ButtonGroup 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "exclusive"; type: "bool" }
        Signal {
            name: "buttonClicked"
            Parameter { type: "QAbstractButton"; isPointer: true }
        }
        Signal {
            name: "buttonPressed"
            Parameter { type: "QAbstractButton"; isPointer: true }
        }
        Signal {
            name: "buttonReleased"
            Parameter { type: "QAbstractButton"; isPointer: true }
        }
        Signal {
            name: "buttonToggled"
            Parameter { type: "QAbstractButton"; isPointer: true }
            Parameter { type: "bool" }
        }
        Signal {
            name: "idClicked"
            Parameter { type: "int" }
        }
        Signal {
            name: "idPressed"
            Parameter { type: "int" }
        }
        Signal {
            name: "idReleased"
            Parameter { type: "int" }
        }
        Signal {
            name: "idToggled"
            Parameter { type: "int" }
            Parameter { type: "bool" }
        }
        Property { name: "buttons"; revision: 256; type: "QVariantList" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QCalendarWidget"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["CalendarWidget 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "HorizontalHeaderFormat"
            values: {
                "NoHorizontalHeader": 0,
                "SingleLetterDayNames": 1,
                "ShortDayNames": 2,
                "LongDayNames": 3
            }
        }
        Enum {
            name: "VerticalHeaderFormat"
            values: {
                "NoVerticalHeader": 0,
                "ISOWeekNumbers": 1
            }
        }
        Enum {
            name: "SelectionMode"
            values: {
                "NoSelection": 0,
                "SingleSelection": 1
            }
        }
        Property { name: "selectedDate"; type: "QDate" }
        Property { name: "minimumDate"; type: "QDate" }
        Property { name: "maximumDate"; type: "QDate" }
        Property { name: "firstDayOfWeek"; type: "Qt::DayOfWeek" }
        Property { name: "gridVisible"; type: "bool" }
        Property { name: "selectionMode"; type: "QCalendarWidget::SelectionMode" }
        Property { name: "horizontalHeaderFormat"; type: "QCalendarWidget::HorizontalHeaderFormat" }
        Property { name: "verticalHeaderFormat"; type: "QCalendarWidget::VerticalHeaderFormat" }
        Property { name: "navigationBarVisible"; type: "bool" }
        Property { name: "dateEditEnabled"; type: "bool" }
        Property { name: "dateEditAcceptDelay"; type: "int" }
        Signal { name: "selectionChanged" }
        Signal {
            name: "clicked"
            Parameter { name: "date"; type: "QDate" }
        }
        Signal {
            name: "activated"
            Parameter { name: "date"; type: "QDate" }
        }
        Signal {
            name: "currentPageChanged"
            Parameter { name: "year"; type: "int" }
            Parameter { name: "month"; type: "int" }
        }
        Method {
            name: "setSelectedDate"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "setDateRange"
            Parameter { name: "min"; type: "QDate" }
            Parameter { name: "max"; type: "QDate" }
        }
        Method {
            name: "setCurrentPage"
            Parameter { name: "year"; type: "int" }
            Parameter { name: "month"; type: "int" }
        }
        Method {
            name: "setGridVisible"
            Parameter { name: "show"; type: "bool" }
        }
        Method {
            name: "setNavigationBarVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "showNextMonth" }
        Method { name: "showPreviousMonth" }
        Method { name: "showNextYear" }
        Method { name: "showPreviousYear" }
        Method { name: "showSelectedDate" }
        Method { name: "showToday" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QCheckBox"
        defaultProperty: "data"
        prototype: "QAbstractButton"
        exports: ["CheckBox 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "tristate"; type: "bool" }
        Signal {
            name: "stateChanged"
            Parameter { type: "int" }
        }
        Signal {
            name: "checkStateChanged"
            Parameter { type: "Qt::CheckState" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QColorDialog"
        prototype: "QDialog"
        Enum {
            name: "ColorDialogOption"
            values: {
                "ShowAlphaChannel": 1,
                "NoButtons": 2,
                "DontUseNativeDialog": 4,
                "NoEyeDropperButton": 8
            }
        }
        Property { name: "currentColor"; type: "QColor" }
        Property { name: "options"; type: "QFlags<QColorDialog::ColorDialogOption>" }
        Signal {
            name: "currentColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "colorSelected"
            Parameter { name: "color"; type: "QColor" }
        }
    }
    Component {
        name: "QColumnView"
        defaultProperty: "data"
        prototype: "QAbstractItemView"
        exports: ["ColumnView 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "resizeGripsVisible"; type: "bool" }
        Signal {
            name: "updatePreviewWidget"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Property { name: "model"; revision: 256; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "selectionModel"; revision: 256; type: "QItemSelectionModel"; isPointer: true }
        Property { name: "itemDelegate"; revision: 256; type: "QAbstractItemDelegate"; isPointer: true }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QComboBox"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["ComboBox 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "InsertPolicy"
            values: {
                "NoInsert": 0,
                "InsertAtTop": 1,
                "InsertAtCurrent": 2,
                "InsertAtBottom": 3,
                "InsertAfterCurrent": 4,
                "InsertBeforeCurrent": 5,
                "InsertAlphabetically": 6
            }
        }
        Enum {
            name: "SizeAdjustPolicy"
            values: {
                "AdjustToContents": 0,
                "AdjustToContentsOnFirstShow": 1,
                "AdjustToMinimumContentsLengthWithIcon": 2
            }
        }
        Property { name: "editable"; type: "bool" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "currentText"; type: "string" }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "currentData"; type: "QVariant"; isReadonly: true }
        Property { name: "maxVisibleItems"; type: "int" }
        Property { name: "maxCount"; type: "int" }
        Property { name: "insertPolicy"; type: "QComboBox::InsertPolicy" }
        Property { name: "sizeAdjustPolicy"; type: "QComboBox::SizeAdjustPolicy" }
        Property { name: "minimumContentsLength"; type: "int" }
        Property { name: "iconSize"; type: "QSize" }
        Property { name: "placeholderText"; type: "string" }
        Property { name: "duplicatesEnabled"; type: "bool" }
        Property { name: "frame"; type: "bool" }
        Property { name: "modelColumn"; type: "int" }
        Signal {
            name: "editTextChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "activated"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "textActivated"
            Parameter { type: "string" }
        }
        Signal {
            name: "highlighted"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "textHighlighted"
            Parameter { type: "string" }
        }
        Signal {
            name: "currentIndexChanged"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "currentTextChanged"
            Parameter { type: "string" }
        }
        Method { name: "clear" }
        Method { name: "clearEditText" }
        Method {
            name: "setEditText"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setCurrentIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setCurrentText"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "inputMethodQuery"
            type: "QVariant"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
        Property { name: "model"; revision: 256; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QCommandLinkButton"
        defaultProperty: "data"
        prototype: "QPushButton"
        exports: ["CommandLinkButton 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "description"; type: "string" }
        Property { name: "flat"; type: "bool" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QDateEdit"
        defaultProperty: "data"
        prototype: "QDateTimeEdit"
        exports: ["DateEdit 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "date"; type: "QDate" }
        Signal {
            name: "userDateChanged"
            Parameter { name: "date"; type: "QDate" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QDateTimeEdit"
        defaultProperty: "data"
        prototype: "QAbstractSpinBox"
        exports: ["DateTimeEdit 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Section"
            values: {
                "NoSection": 0,
                "AmPmSection": 1,
                "MSecSection": 2,
                "SecondSection": 4,
                "MinuteSection": 8,
                "HourSection": 16,
                "DaySection": 256,
                "MonthSection": 512,
                "YearSection": 1024,
                "TimeSections_Mask": 31,
                "DateSections_Mask": 1792
            }
        }
        Enum {
            name: "Sections"
            values: {
                "NoSection": 0,
                "AmPmSection": 1,
                "MSecSection": 2,
                "SecondSection": 4,
                "MinuteSection": 8,
                "HourSection": 16,
                "DaySection": 256,
                "MonthSection": 512,
                "YearSection": 1024,
                "TimeSections_Mask": 31,
                "DateSections_Mask": 1792
            }
        }
        Property { name: "dateTime"; type: "QDateTime" }
        Property { name: "date"; type: "QDate" }
        Property { name: "time"; type: "QTime" }
        Property { name: "maximumDateTime"; type: "QDateTime" }
        Property { name: "minimumDateTime"; type: "QDateTime" }
        Property { name: "maximumDate"; type: "QDate" }
        Property { name: "minimumDate"; type: "QDate" }
        Property { name: "maximumTime"; type: "QTime" }
        Property { name: "minimumTime"; type: "QTime" }
        Property { name: "currentSection"; type: "QDateTimeEdit::Section" }
        Property { name: "displayedSections"; type: "QFlags<QDateTimeEdit::Section>"; isReadonly: true }
        Property { name: "displayFormat"; type: "string" }
        Property { name: "calendarPopup"; type: "bool" }
        Property { name: "currentSectionIndex"; type: "int" }
        Property { name: "sectionCount"; type: "int"; isReadonly: true }
        Property { name: "timeSpec"; type: "Qt::TimeSpec" }
        Property { name: "timeZone"; type: "QTimeZone" }
        Signal {
            name: "dateTimeChanged"
            Parameter { name: "dateTime"; type: "QDateTime" }
        }
        Signal {
            name: "timeChanged"
            Parameter { name: "time"; type: "QTime" }
        }
        Signal {
            name: "dateChanged"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "setDateTime"
            Parameter { name: "dateTime"; type: "QDateTime" }
        }
        Method {
            name: "setDate"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "setTime"
            Parameter { name: "time"; type: "QTime" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QDial"
        defaultProperty: "data"
        prototype: "QAbstractSlider"
        exports: ["Dial 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "wrapping"; type: "bool" }
        Property { name: "notchSize"; type: "int"; isReadonly: true }
        Property { name: "notchTarget"; type: "double" }
        Property { name: "notchesVisible"; type: "bool" }
        Method {
            name: "setNotchesVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setWrapping"
            Parameter { name: "on"; type: "bool" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QDialog"
        prototype: "QWidget"
        Enum {
            name: "DialogCode"
            values: {
                "Rejected": 0,
                "Accepted": 1
            }
        }
        Property { name: "sizeGripEnabled"; type: "bool" }
        Property { name: "modal"; type: "bool" }
        Signal {
            name: "finished"
            Parameter { name: "result"; type: "int" }
        }
        Signal { name: "accepted" }
        Signal { name: "rejected" }
        Method { name: "open" }
        Method { name: "exec"; type: "int" }
        Method {
            name: "done"
            Parameter { type: "int" }
        }
        Method { name: "accept" }
        Method { name: "reject" }
    }
    Component {
        name: "QDialogButtonBox"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["DialogButtonBox 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "StandardButtons"
            values: {
                "NoButton": 0,
                "Ok": 1024,
                "Save": 2048,
                "SaveAll": 4096,
                "Open": 8192,
                "Yes": 16384,
                "YesToAll": 32768,
                "No": 65536,
                "NoToAll": 131072,
                "Abort": 262144,
                "Retry": 524288,
                "Ignore": 1048576,
                "Close": 2097152,
                "Cancel": 4194304,
                "Discard": 8388608,
                "Help": 16777216,
                "Apply": 33554432,
                "Reset": 67108864,
                "RestoreDefaults": 134217728
            }
        }
        Property { name: "orientation"; type: "Qt::Orientation" }
        Property { name: "standardButtons"; type: "QFlags<QDialogButtonBox::StandardButton>" }
        Property { name: "centerButtons"; type: "bool" }
        Signal {
            name: "clicked"
            Parameter { name: "button"; type: "QAbstractButton"; isPointer: true }
        }
        Signal { name: "accepted" }
        Signal { name: "helpRequested" }
        Signal { name: "rejected" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QDoubleSpinBox"
        defaultProperty: "data"
        prototype: "QAbstractSpinBox"
        exports: ["DoubleSpinBox 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "prefix"; type: "string" }
        Property { name: "suffix"; type: "string" }
        Property { name: "cleanText"; type: "string"; isReadonly: true }
        Property { name: "decimals"; type: "int" }
        Property { name: "minimum"; type: "double" }
        Property { name: "maximum"; type: "double" }
        Property { name: "singleStep"; type: "double" }
        Property { name: "stepType"; type: "QAbstractSpinBox::StepType" }
        Property { name: "value"; type: "double" }
        Signal {
            name: "valueChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "textChanged"
            Parameter { type: "string" }
        }
        Method {
            name: "setValue"
            Parameter { name: "val"; type: "double" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QFileDialog"
        prototype: "QDialog"
        Enum {
            name: "ViewMode"
            values: {
                "Detail": 0,
                "List": 1
            }
        }
        Enum {
            name: "FileMode"
            values: {
                "AnyFile": 0,
                "ExistingFile": 1,
                "Directory": 2,
                "ExistingFiles": 3
            }
        }
        Enum {
            name: "AcceptMode"
            values: {
                "AcceptOpen": 0,
                "AcceptSave": 1
            }
        }
        Enum {
            name: "Option"
            values: {
                "ShowDirsOnly": 1,
                "DontResolveSymlinks": 2,
                "DontConfirmOverwrite": 4,
                "DontUseNativeDialog": 8,
                "ReadOnly": 16,
                "HideNameFilterDetails": 32,
                "DontUseCustomDirectoryIcons": 64
            }
        }
        Enum {
            name: "Options"
            values: {
                "ShowDirsOnly": 1,
                "DontResolveSymlinks": 2,
                "DontConfirmOverwrite": 4,
                "DontUseNativeDialog": 8,
                "ReadOnly": 16,
                "HideNameFilterDetails": 32,
                "DontUseCustomDirectoryIcons": 64
            }
        }
        Property { name: "viewMode"; type: "QFileDialog::ViewMode" }
        Property { name: "fileMode"; type: "QFileDialog::FileMode" }
        Property { name: "acceptMode"; type: "QFileDialog::AcceptMode" }
        Property { name: "defaultSuffix"; type: "string" }
        Property { name: "options"; type: "QFlags<QFileDialog::Option>" }
        Property { name: "supportedSchemes"; type: "QStringList" }
        Signal {
            name: "fileSelected"
            Parameter { name: "file"; type: "string" }
        }
        Signal {
            name: "filesSelected"
            Parameter { name: "files"; type: "QStringList" }
        }
        Signal {
            name: "currentChanged"
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "directoryEntered"
            Parameter { name: "directory"; type: "string" }
        }
        Signal {
            name: "urlSelected"
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal {
            name: "urlsSelected"
            Parameter { name: "urls"; type: "QList<QUrl>" }
        }
        Signal {
            name: "currentUrlChanged"
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal {
            name: "directoryUrlEntered"
            Parameter { name: "directory"; type: "QUrl" }
        }
        Signal {
            name: "filterSelected"
            Parameter { name: "filter"; type: "string" }
        }
    }
    Component {
        name: "QFileSystemModel"
        defaultProperty: "data"
        prototype: "QAbstractItemModel"
        exports: ["FileSystemModel 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Option"
            values: {
                "DontWatchForChanges": 1,
                "DontResolveSymlinks": 2,
                "DontUseCustomDirectoryIcons": 4
            }
        }
        Property { name: "resolveSymlinks"; type: "bool" }
        Property { name: "readOnly"; type: "bool" }
        Property { name: "nameFilterDisables"; type: "bool" }
        Property { name: "options"; type: "QFlags<QFileSystemModel::Option>" }
        Signal {
            name: "rootPathChanged"
            Parameter { name: "newPath"; type: "string" }
        }
        Signal {
            name: "fileRenamed"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "oldName"; type: "string" }
            Parameter { name: "newName"; type: "string" }
        }
        Signal {
            name: "directoryLoaded"
            Parameter { name: "path"; type: "string" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "rootPath"; revision: 256; type: "string" }
    }
    Component {
        name: "QFontDialog"
        prototype: "QDialog"
        Enum {
            name: "FontDialogOption"
            values: {
                "NoButtons": 1,
                "DontUseNativeDialog": 2,
                "ScalableFonts": 4,
                "NonScalableFonts": 8,
                "MonospacedFonts": 16,
                "ProportionalFonts": 32
            }
        }
        Property { name: "currentFont"; type: "QFont" }
        Property { name: "options"; type: "QFlags<QFontDialog::FontDialogOption>" }
        Signal {
            name: "currentFontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "fontSelected"
            Parameter { name: "font"; type: "QFont" }
        }
    }
    Component {
        name: "QFormLayout"
        prototype: "QLayout"
        Enum {
            name: "FieldGrowthPolicy"
            values: {
                "FieldsStayAtSizeHint": 0,
                "ExpandingFieldsGrow": 1,
                "AllNonFixedFieldsGrow": 2
            }
        }
        Enum {
            name: "RowWrapPolicy"
            values: {
                "DontWrapRows": 0,
                "WrapLongRows": 1,
                "WrapAllRows": 2
            }
        }
        Enum {
            name: "ItemRole"
            values: {
                "LabelRole": 0,
                "FieldRole": 1,
                "SpanningRole": 2
            }
        }
        Property { name: "fieldGrowthPolicy"; type: "QFormLayout::FieldGrowthPolicy" }
        Property { name: "rowWrapPolicy"; type: "QFormLayout::RowWrapPolicy" }
        Property { name: "labelAlignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Property { name: "formAlignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Property { name: "horizontalSpacing"; type: "int" }
        Property { name: "verticalSpacing"; type: "int" }
    }
    Component {
        name: "QFrame"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["Frame 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Shape"
            values: {
                "NoFrame": 0,
                "Box": 1,
                "Panel": 2,
                "WinPanel": 3,
                "HLine": 4,
                "VLine": 5,
                "StyledPanel": 6
            }
        }
        Enum {
            name: "Shadow"
            values: {
                "Plain": 16,
                "Raised": 32,
                "Sunken": 48
            }
        }
        Property { name: "frameShape"; type: "QFrame::Shape" }
        Property { name: "frameShadow"; type: "QFrame::Shadow" }
        Property { name: "lineWidth"; type: "int" }
        Property { name: "midLineWidth"; type: "int" }
        Property { name: "frameWidth"; type: "int"; isReadonly: true }
        Property { name: "frameRect"; type: "QRect" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component { name: "QGridLayout"; prototype: "QLayout" }
    Component {
        name: "QGroupBox"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["GroupBox 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "title"; type: "string" }
        Property { name: "alignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Property { name: "flat"; type: "bool" }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Signal {
            name: "clicked"
            Parameter { name: "checked"; type: "bool" }
        }
        Signal { name: "clicked" }
        Signal {
            name: "toggled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setChecked"
            Parameter { name: "checked"; type: "bool" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component { name: "QHBoxLayout"; prototype: "QBoxLayout" }
    Component {
        name: "QHeaderView"
        prototype: "QAbstractItemView"
        exports: ["HeaderView 1.0"]
        isCreatable: false

        Enum {
            name: "ResizeMode"
            values: {
                "Interactive": 0,
                "Stretch": 1,
                "Fixed": 2,
                "ResizeToContents": 3,
                "Custom": 2
            }
        }
        Property { name: "firstSectionMovable"; type: "bool" }
        Property { name: "showSortIndicator"; type: "bool" }
        Property { name: "sectionsMovable"; type: "bool" }
        Property { name: "sectionsClickable"; type: "bool" }
        Property { name: "highlightSections"; type: "bool" }
        Property { name: "stretchLastSection"; type: "bool" }
        Property { name: "cascadingSectionResizes"; type: "bool" }
        Property { name: "defaultSectionSize"; type: "int" }
        Property { name: "minimumSectionSize"; type: "int" }
        Property { name: "maximumSectionSize"; type: "int" }
        Property { name: "defaultAlignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Property { name: "sortIndicatorClearable"; type: "bool" }
        Signal {
            name: "sectionMoved"
            Parameter { name: "logicalIndex"; type: "int" }
            Parameter { name: "oldVisualIndex"; type: "int" }
            Parameter { name: "newVisualIndex"; type: "int" }
        }
        Signal {
            name: "sectionResized"
            Parameter { name: "logicalIndex"; type: "int" }
            Parameter { name: "oldSize"; type: "int" }
            Parameter { name: "newSize"; type: "int" }
        }
        Signal {
            name: "sectionPressed"
            Parameter { name: "logicalIndex"; type: "int" }
        }
        Signal {
            name: "sectionClicked"
            Parameter { name: "logicalIndex"; type: "int" }
        }
        Signal {
            name: "sectionEntered"
            Parameter { name: "logicalIndex"; type: "int" }
        }
        Signal {
            name: "sectionDoubleClicked"
            Parameter { name: "logicalIndex"; type: "int" }
        }
        Signal {
            name: "sectionCountChanged"
            Parameter { name: "oldCount"; type: "int" }
            Parameter { name: "newCount"; type: "int" }
        }
        Signal {
            name: "sectionHandleDoubleClicked"
            Parameter { name: "logicalIndex"; type: "int" }
        }
        Signal { name: "geometriesChanged" }
        Signal {
            name: "sortIndicatorChanged"
            Parameter { name: "logicalIndex"; type: "int" }
            Parameter { name: "order"; type: "Qt::SortOrder" }
        }
        Signal {
            name: "sortIndicatorClearableChanged"
            Parameter { name: "clearable"; type: "bool" }
        }
        Method {
            name: "setOffset"
            Parameter { name: "offset"; type: "int" }
        }
        Method {
            name: "setOffsetToSectionPosition"
            Parameter { name: "visualIndex"; type: "int" }
        }
        Method { name: "setOffsetToLastSection" }
        Method {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "logicalFirst"; type: "int" }
            Parameter { name: "logicalLast"; type: "int" }
        }
    }
    Component {
        name: "QInputDialog"
        prototype: "QDialog"
        Signal {
            name: "textValueChanged"
            Parameter { name: "text"; type: "string" }
        }
        Signal {
            name: "textValueSelected"
            Parameter { name: "text"; type: "string" }
        }
        Signal {
            name: "intValueChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "intValueSelected"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "doubleValueChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "doubleValueSelected"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "QItemSelectionModel"
        prototype: "QObject"
        Enum {
            name: "SelectionFlags"
            values: {
                "NoUpdate": 0,
                "Clear": 1,
                "Select": 2,
                "Deselect": 4,
                "Toggle": 8,
                "Current": 16,
                "Rows": 32,
                "Columns": 64,
                "SelectCurrent": 18,
                "ToggleCurrent": 24,
                "ClearAndSelect": 3
            }
        }
        Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "hasSelection"; type: "bool"; isReadonly: true }
        Property { name: "currentIndex"; type: "QModelIndex"; isReadonly: true }
        Property { name: "selection"; type: "QItemSelection"; isReadonly: true }
        Property { name: "selectedIndexes"; type: "QList<QModelIndex>"; isReadonly: true }
        Signal {
            name: "selectionChanged"
            Parameter { name: "selected"; type: "QItemSelection" }
            Parameter { name: "deselected"; type: "QItemSelection" }
        }
        Signal {
            name: "currentChanged"
            Parameter { name: "current"; type: "QModelIndex" }
            Parameter { name: "previous"; type: "QModelIndex" }
        }
        Signal {
            name: "currentRowChanged"
            Parameter { name: "current"; type: "QModelIndex" }
            Parameter { name: "previous"; type: "QModelIndex" }
        }
        Signal {
            name: "currentColumnChanged"
            Parameter { name: "current"; type: "QModelIndex" }
            Parameter { name: "previous"; type: "QModelIndex" }
        }
        Signal {
            name: "modelChanged"
            Parameter { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method {
            name: "setCurrentIndex"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "command"; type: "QItemSelectionModel::SelectionFlags" }
        }
        Method {
            name: "select"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "command"; type: "QItemSelectionModel::SelectionFlags" }
        }
        Method {
            name: "select"
            Parameter { name: "selection"; type: "QItemSelection" }
            Parameter { name: "command"; type: "QItemSelectionModel::SelectionFlags" }
        }
        Method { name: "clear" }
        Method { name: "reset" }
        Method { name: "clearSelection" }
        Method { name: "clearCurrentIndex" }
        Method {
            name: "isSelected"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "isRowSelected"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "isRowSelected"
            type: "bool"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "isColumnSelected"
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "isColumnSelected"
            type: "bool"
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "rowIntersectsSelection"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "rowIntersectsSelection"
            type: "bool"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "columnIntersectsSelection"
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "columnIntersectsSelection"
            type: "bool"
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "selectedRows"
            type: "QModelIndexList"
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "selectedRows"; type: "QModelIndexList" }
        Method {
            name: "selectedColumns"
            type: "QModelIndexList"
            Parameter { name: "row"; type: "int" }
        }
        Method { name: "selectedColumns"; type: "QModelIndexList" }
    }
    Component {
        name: "QLCDNumber"
        defaultProperty: "data"
        prototype: "QFrame"
        exports: ["LCDNumber 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Mode"
            values: {
                "Hex": 0,
                "Dec": 1,
                "Oct": 2,
                "Bin": 3
            }
        }
        Enum {
            name: "SegmentStyle"
            values: {
                "Outline": 0,
                "Filled": 1,
                "Flat": 2
            }
        }
        Property { name: "smallDecimalPoint"; type: "bool" }
        Property { name: "digitCount"; type: "int" }
        Property { name: "mode"; type: "QLCDNumber::Mode" }
        Property { name: "segmentStyle"; type: "QLCDNumber::SegmentStyle" }
        Property { name: "value"; type: "double" }
        Property { name: "intValue"; type: "int" }
        Signal { name: "overflow" }
        Method {
            name: "display"
            Parameter { name: "str"; type: "string" }
        }
        Method {
            name: "display"
            Parameter { name: "num"; type: "int" }
        }
        Method {
            name: "display"
            Parameter { name: "num"; type: "double" }
        }
        Method { name: "setHexMode" }
        Method { name: "setDecMode" }
        Method { name: "setOctMode" }
        Method { name: "setBinMode" }
        Method {
            name: "setSmallDecimalPoint"
            Parameter { type: "bool" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QLabel"
        defaultProperty: "data"
        prototype: "QFrame"
        exports: ["Label 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "text"; type: "string" }
        Property { name: "textFormat"; type: "Qt::TextFormat" }
        Property { name: "pixmap"; type: "QPixmap" }
        Property { name: "scaledContents"; type: "bool" }
        Property { name: "alignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Property { name: "wordWrap"; type: "bool" }
        Property { name: "margin"; type: "int" }
        Property { name: "indent"; type: "int" }
        Property { name: "openExternalLinks"; type: "bool" }
        Property { name: "textInteractionFlags"; type: "QFlags<Qt::TextInteractionFlag>" }
        Property { name: "hasSelectedText"; type: "bool"; isReadonly: true }
        Property { name: "selectedText"; type: "string"; isReadonly: true }
        Signal {
            name: "linkActivated"
            Parameter { name: "link"; type: "string" }
        }
        Signal {
            name: "linkHovered"
            Parameter { name: "link"; type: "string" }
        }
        Method {
            name: "setText"
            Parameter { type: "string" }
        }
        Method {
            name: "setPixmap"
            Parameter { type: "QPixmap" }
        }
        Method {
            name: "setPicture"
            Parameter { type: "QPicture" }
        }
        Method {
            name: "setMovie"
            Parameter { name: "movie"; type: "QMovie"; isPointer: true }
        }
        Method {
            name: "setNum"
            Parameter { type: "int" }
        }
        Method {
            name: "setNum"
            Parameter { type: "double" }
        }
        Method { name: "clear" }
        Property { name: "buddy"; revision: 256; type: "QWidget"; isPointer: true }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QLayout"
        prototype: "QObject"
        exports: ["Layout 1.0"]
        isCreatable: false

        Enum {
            name: "SizeConstraint"
            values: {
                "SetDefaultConstraint": 0,
                "SetNoConstraint": 1,
                "SetMinimumSize": 2,
                "SetFixedSize": 3,
                "SetMaximumSize": 4,
                "SetMinAndMaxSize": 5
            }
        }
        Property { name: "spacing"; type: "int" }
        Property { name: "contentsMargins"; type: "QMargins" }
        Property { name: "sizeConstraint"; type: "QLayout::SizeConstraint" }
    }
    Component {
        name: "QLineEdit"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["LineEdit 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "ActionPosition"
            values: {
                "LeadingPosition": 0,
                "TrailingPosition": 1
            }
        }
        Enum {
            name: "EchoMode"
            values: {
                "Normal": 0,
                "NoEcho": 1,
                "Password": 2,
                "PasswordEchoOnEdit": 3
            }
        }
        Property { name: "inputMask"; type: "string" }
        Property { name: "text"; type: "string" }
        Property { name: "maxLength"; type: "int" }
        Property { name: "frame"; type: "bool" }
        Property { name: "echoMode"; type: "QLineEdit::EchoMode" }
        Property { name: "displayText"; type: "string"; isReadonly: true }
        Property { name: "cursorPosition"; type: "int" }
        Property { name: "alignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Property { name: "modified"; type: "bool" }
        Property { name: "hasSelectedText"; type: "bool"; isReadonly: true }
        Property { name: "selectedText"; type: "string"; isReadonly: true }
        Property { name: "dragEnabled"; type: "bool" }
        Property { name: "readOnly"; type: "bool" }
        Property { name: "undoAvailable"; type: "bool"; isReadonly: true }
        Property { name: "redoAvailable"; type: "bool"; isReadonly: true }
        Property { name: "acceptableInput"; type: "bool"; isReadonly: true }
        Property { name: "placeholderText"; type: "string" }
        Property { name: "cursorMoveStyle"; type: "Qt::CursorMoveStyle" }
        Property { name: "clearButtonEnabled"; type: "bool" }
        Signal {
            name: "textChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "textEdited"
            Parameter { type: "string" }
        }
        Signal {
            name: "cursorPositionChanged"
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Signal { name: "returnPressed" }
        Signal { name: "editingFinished" }
        Signal { name: "selectionChanged" }
        Signal { name: "inputRejected" }
        Method {
            name: "setText"
            Parameter { type: "string" }
        }
        Method { name: "clear" }
        Method { name: "selectAll" }
        Method { name: "undo" }
        Method { name: "redo" }
        Method { name: "cut" }
        Method { name: "copy" }
        Method { name: "paste" }
        Method {
            name: "inputMethodQuery"
            type: "QVariant"
            Parameter { name: "property"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QListView"
        defaultProperty: "data"
        prototype: "QAbstractItemView"
        exports: ["ListView 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Movement"
            values: {
                "Static": 0,
                "Free": 1,
                "Snap": 2
            }
        }
        Enum {
            name: "Flow"
            values: {
                "LeftToRight": 0,
                "TopToBottom": 1
            }
        }
        Enum {
            name: "ResizeMode"
            values: {
                "Fixed": 0,
                "Adjust": 1
            }
        }
        Enum {
            name: "LayoutMode"
            values: {
                "SinglePass": 0,
                "Batched": 1
            }
        }
        Enum {
            name: "ViewMode"
            values: {
                "ListMode": 0,
                "IconMode": 1
            }
        }
        Property { name: "movement"; type: "QListView::Movement" }
        Property { name: "flow"; type: "QListView::Flow" }
        Property { name: "isWrapping"; type: "bool" }
        Property { name: "resizeMode"; type: "QListView::ResizeMode" }
        Property { name: "layoutMode"; type: "QListView::LayoutMode" }
        Property { name: "spacing"; type: "int" }
        Property { name: "gridSize"; type: "QSize" }
        Property { name: "viewMode"; type: "QListView::ViewMode" }
        Property { name: "modelColumn"; type: "int" }
        Property { name: "uniformItemSizes"; type: "bool" }
        Property { name: "batchSize"; type: "int" }
        Property { name: "wordWrap"; type: "bool" }
        Property { name: "selectionRectVisible"; type: "bool" }
        Property { name: "itemAlignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Signal {
            name: "indexesMoved"
            Parameter { name: "indexes"; type: "QModelIndexList" }
        }
        Property { name: "model"; revision: 256; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "selectionModel"; revision: 256; type: "QItemSelectionModel"; isPointer: true }
        Property { name: "itemDelegate"; revision: 256; type: "QAbstractItemDelegate"; isPointer: true }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QMainWindow"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["MainWindow 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "DockOption"
            values: {
                "AnimatedDocks": 1,
                "AllowNestedDocks": 2,
                "AllowTabbedDocks": 4,
                "ForceTabbedDocks": 8,
                "VerticalTabs": 16,
                "GroupedDragging": 32
            }
        }
        Enum {
            name: "DockOptions"
            values: {
                "AnimatedDocks": 1,
                "AllowNestedDocks": 2,
                "AllowTabbedDocks": 4,
                "ForceTabbedDocks": 8,
                "VerticalTabs": 16,
                "GroupedDragging": 32
            }
        }
        Property { name: "iconSize"; type: "QSize" }
        Property { name: "toolButtonStyle"; type: "Qt::ToolButtonStyle" }
        Property { name: "animated"; type: "bool" }
        Property { name: "documentMode"; type: "bool" }
        Property { name: "tabShape"; type: "QTabWidget::TabShape" }
        Property { name: "dockNestingEnabled"; type: "bool" }
        Property { name: "dockOptions"; type: "QFlags<QMainWindow::DockOption>" }
        Property { name: "unifiedTitleAndToolBarOnMac"; type: "bool" }
        Signal {
            name: "iconSizeChanged"
            Parameter { name: "iconSize"; type: "QSize" }
        }
        Signal {
            name: "toolButtonStyleChanged"
            Parameter { name: "toolButtonStyle"; type: "Qt::ToolButtonStyle" }
        }
        Signal {
            name: "tabifiedDockWidgetActivated"
            Parameter { name: "dockWidget"; type: "QDockWidget"; isPointer: true }
        }
        Method {
            name: "setAnimated"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setDockNestingEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setUnifiedTitleAndToolBarOnMac"
            Parameter { name: "set"; type: "bool" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QMenu"
        prototype: "QWidget"
        Property { name: "tearOffEnabled"; type: "bool" }
        Property { name: "title"; type: "string" }
        Property { name: "icon"; type: "QIcon" }
        Property { name: "separatorsCollapsible"; type: "bool" }
        Property { name: "toolTipsVisible"; type: "bool" }
        Signal { name: "aboutToShow" }
        Signal { name: "aboutToHide" }
        Signal {
            name: "triggered"
            Parameter { name: "action"; type: "QAction"; isPointer: true }
        }
        Signal {
            name: "hovered"
            Parameter { name: "action"; type: "QAction"; isPointer: true }
        }
    }
    Component {
        name: "QMenuBar"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["MenuBar 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "defaultUp"; type: "bool" }
        Property { name: "nativeMenuBar"; type: "bool" }
        Signal {
            name: "triggered"
            Parameter { name: "action"; type: "QAction"; isPointer: true }
        }
        Signal {
            name: "hovered"
            Parameter { name: "action"; type: "QAction"; isPointer: true }
        }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QMessageBox"
        prototype: "QDialog"
        Enum {
            name: "Option"
            values: {
                "DontUseNativeDialog": 1
            }
        }
        Enum {
            name: "Icon"
            values: {
                "NoIcon": 0,
                "Information": 1,
                "Warning": 2,
                "Critical": 3,
                "Question": 4
            }
        }
        Enum {
            name: "ButtonRole"
            values: {
                "InvalidRole": -1,
                "AcceptRole": 0,
                "RejectRole": 1,
                "DestructiveRole": 2,
                "ActionRole": 3,
                "HelpRole": 4,
                "YesRole": 5,
                "NoRole": 6,
                "ResetRole": 7,
                "ApplyRole": 8,
                "NRoles": 9
            }
        }
        Enum {
            name: "StandardButton"
            values: {
                "NoButton": 0,
                "Ok": 1024,
                "Save": 2048,
                "SaveAll": 4096,
                "Open": 8192,
                "Yes": 16384,
                "YesToAll": 32768,
                "No": 65536,
                "NoToAll": 131072,
                "Abort": 262144,
                "Retry": 524288,
                "Ignore": 1048576,
                "Close": 2097152,
                "Cancel": 4194304,
                "Discard": 8388608,
                "Help": 16777216,
                "Apply": 33554432,
                "Reset": 67108864,
                "RestoreDefaults": 134217728,
                "FirstButton": 1024,
                "LastButton": 134217728,
                "YesAll": 32768,
                "NoAll": 131072,
                "Default": 256,
                "Escape": 512,
                "FlagMask": 768,
                "ButtonMask": -769
            }
        }
        Enum {
            name: "StandardButtons"
            values: {
                "NoButton": 0,
                "Ok": 1024,
                "Save": 2048,
                "SaveAll": 4096,
                "Open": 8192,
                "Yes": 16384,
                "YesToAll": 32768,
                "No": 65536,
                "NoToAll": 131072,
                "Abort": 262144,
                "Retry": 524288,
                "Ignore": 1048576,
                "Close": 2097152,
                "Cancel": 4194304,
                "Discard": 8388608,
                "Help": 16777216,
                "Apply": 33554432,
                "Reset": 67108864,
                "RestoreDefaults": 134217728,
                "FirstButton": 1024,
                "LastButton": 134217728,
                "YesAll": 32768,
                "NoAll": 131072,
                "Default": 256,
                "Escape": 512,
                "FlagMask": 768,
                "ButtonMask": -769
            }
        }
        Property { name: "text"; type: "string" }
        Property { name: "icon"; type: "QMessageBox::Icon" }
        Property { name: "iconPixmap"; type: "QPixmap" }
        Property { name: "textFormat"; type: "Qt::TextFormat" }
        Property { name: "standardButtons"; type: "QFlags<QMessageBox::StandardButton>" }
        Property { name: "detailedText"; type: "string" }
        Property { name: "informativeText"; type: "string" }
        Property { name: "textInteractionFlags"; type: "QFlags<Qt::TextInteractionFlag>" }
        Property { name: "options"; type: "QFlags<QMessageBox::Option>" }
        Signal {
            name: "buttonClicked"
            Parameter { name: "button"; type: "QAbstractButton"; isPointer: true }
        }
    }
    Component {
        name: "QPlainTextEdit"
        defaultProperty: "data"
        prototype: "QAbstractScrollArea"
        exports: ["PlainTextEdit 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "LineWrapMode"
            values: {
                "NoWrap": 0,
                "WidgetWidth": 1
            }
        }
        Property { name: "tabChangesFocus"; type: "bool" }
        Property { name: "documentTitle"; type: "string" }
        Property { name: "undoRedoEnabled"; type: "bool" }
        Property { name: "lineWrapMode"; type: "QPlainTextEdit::LineWrapMode" }
        Property { name: "readOnly"; type: "bool" }
        Property { name: "plainText"; type: "string" }
        Property { name: "overwriteMode"; type: "bool" }
        Property { name: "tabStopDistance"; type: "double" }
        Property { name: "cursorWidth"; type: "int" }
        Property { name: "textInteractionFlags"; type: "QFlags<Qt::TextInteractionFlag>" }
        Property { name: "blockCount"; type: "int"; isReadonly: true }
        Property { name: "maximumBlockCount"; type: "int" }
        Property { name: "backgroundVisible"; type: "bool" }
        Property { name: "centerOnScroll"; type: "bool" }
        Property { name: "placeholderText"; type: "string" }
        Signal { name: "textChanged" }
        Signal {
            name: "undoAvailable"
            Parameter { name: "b"; type: "bool" }
        }
        Signal {
            name: "redoAvailable"
            Parameter { name: "b"; type: "bool" }
        }
        Signal {
            name: "copyAvailable"
            Parameter { name: "b"; type: "bool" }
        }
        Signal { name: "selectionChanged" }
        Signal { name: "cursorPositionChanged" }
        Signal {
            name: "updateRequest"
            Parameter { name: "rect"; type: "QRect" }
            Parameter { name: "dy"; type: "int" }
        }
        Signal {
            name: "blockCountChanged"
            Parameter { name: "newBlockCount"; type: "int" }
        }
        Signal {
            name: "modificationChanged"
            Parameter { type: "bool" }
        }
        Method {
            name: "setPlainText"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "cut" }
        Method { name: "copy" }
        Method { name: "paste" }
        Method { name: "undo" }
        Method { name: "redo" }
        Method { name: "clear" }
        Method { name: "selectAll" }
        Method {
            name: "insertPlainText"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "appendPlainText"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "appendHtml"
            Parameter { name: "html"; type: "string" }
        }
        Method { name: "centerCursor" }
        Method {
            name: "zoomIn"
            Parameter { name: "range"; type: "int" }
        }
        Method { name: "zoomIn" }
        Method {
            name: "zoomOut"
            Parameter { name: "range"; type: "int" }
        }
        Method { name: "zoomOut" }
        Method {
            name: "inputMethodQuery"
            type: "QVariant"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QProgressBar"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["ProgressBar 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Direction"
            values: {
                "TopToBottom": 0,
                "BottomToTop": 1
            }
        }
        Property { name: "minimum"; type: "int" }
        Property { name: "maximum"; type: "int" }
        Property { name: "text"; type: "string"; isReadonly: true }
        Property { name: "value"; type: "int" }
        Property { name: "alignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Property { name: "textVisible"; type: "bool" }
        Property { name: "orientation"; type: "Qt::Orientation" }
        Property { name: "invertedAppearance"; type: "bool" }
        Property { name: "textDirection"; type: "QProgressBar::Direction" }
        Property { name: "format"; type: "string" }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "int" }
        }
        Method { name: "reset" }
        Method {
            name: "setRange"
            Parameter { name: "minimum"; type: "int" }
            Parameter { name: "maximum"; type: "int" }
        }
        Method {
            name: "setMinimum"
            Parameter { name: "minimum"; type: "int" }
        }
        Method {
            name: "setMaximum"
            Parameter { name: "maximum"; type: "int" }
        }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setOrientation"
            Parameter { type: "Qt::Orientation" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QPushButton"
        defaultProperty: "data"
        prototype: "QAbstractButton"
        exports: ["PushButton 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "autoDefault"; type: "bool" }
        Property { name: "default"; type: "bool" }
        Property { name: "flat"; type: "bool" }
        Method { name: "showMenu" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QQuickWidget"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["QuickWidget 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "ResizeMode"
            values: {
                "SizeViewToRootObject": 0,
                "SizeRootObjectToView": 1
            }
        }
        Enum {
            name: "Status"
            values: {
                "Null": 0,
                "Ready": 1,
                "Loading": 2,
                "Error": 3
            }
        }
        Property { name: "resizeMode"; type: "QQuickWidget::ResizeMode" }
        Property { name: "status"; type: "QQuickWidget::Status"; isReadonly: true }
        Property { name: "source"; type: "QUrl" }
        Signal {
            name: "statusChanged"
            Parameter { type: "QQuickWidget::Status" }
        }
        Signal {
            name: "sceneGraphError"
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "setSource"
            Parameter { type: "QUrl" }
        }
        Method {
            name: "setContent"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Property { name: "rootContext"; revision: 256; type: "QObject"; isPointer: true }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QRadioButton"
        defaultProperty: "data"
        prototype: "QAbstractButton"
        exports: ["RadioButton 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QScrollArea"
        defaultProperty: "data"
        prototype: "QAbstractScrollArea"
        exports: ["ScrollArea 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "widgetResizable"; type: "bool" }
        Property { name: "alignment"; type: "QFlags<Qt::AlignmentFlag>" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QScrollBar"
        defaultProperty: "data"
        prototype: "QAbstractSlider"
        exports: ["ScrollBar 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QSlider"
        defaultProperty: "data"
        prototype: "QAbstractSlider"
        exports: ["Slider 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "TickPosition"
            values: {
                "NoTicks": 0,
                "TicksAbove": 1,
                "TicksLeft": 1,
                "TicksBelow": 2,
                "TicksRight": 2,
                "TicksBothSides": 3
            }
        }
        Property { name: "tickPosition"; type: "QSlider::TickPosition" }
        Property { name: "tickInterval"; type: "int" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QSpinBox"
        defaultProperty: "data"
        prototype: "QAbstractSpinBox"
        exports: ["SpinBox 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "suffix"; type: "string" }
        Property { name: "prefix"; type: "string" }
        Property { name: "cleanText"; type: "string"; isReadonly: true }
        Property { name: "minimum"; type: "int" }
        Property { name: "maximum"; type: "int" }
        Property { name: "singleStep"; type: "int" }
        Property { name: "stepType"; type: "QAbstractSpinBox::StepType" }
        Property { name: "value"; type: "int" }
        Property { name: "displayIntegerBase"; type: "int" }
        Signal {
            name: "valueChanged"
            Parameter { type: "int" }
        }
        Signal {
            name: "textChanged"
            Parameter { type: "string" }
        }
        Method {
            name: "setValue"
            Parameter { name: "val"; type: "int" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QStackedLayout"
        prototype: "QLayout"
        Enum {
            name: "StackingMode"
            values: {
                "StackOne": 0,
                "StackAll": 1
            }
        }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "stackingMode"; type: "QStackedLayout::StackingMode" }
        Signal {
            name: "widgetRemoved"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "currentChanged"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setCurrentIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setCurrentWidget"
            Parameter { name: "w"; type: "QWidget"; isPointer: true }
        }
    }
    Component {
        name: "QStackedWidget"
        defaultProperty: "data"
        prototype: "QFrame"
        exports: ["StackedWidget 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "currentIndex"; type: "int" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "currentChanged"
            Parameter { type: "int" }
        }
        Signal {
            name: "widgetRemoved"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setCurrentIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setCurrentWidget"
            Parameter { name: "w"; type: "QWidget"; isPointer: true }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QStatusBar"
        prototype: "QWidget"
        Property { name: "sizeGripEnabled"; type: "bool" }
        Signal {
            name: "messageChanged"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "showMessage"
            Parameter { name: "text"; type: "string" }
            Parameter { name: "timeout"; type: "int" }
        }
        Method {
            name: "showMessage"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "clearMessage" }
    }
    Component {
        name: "QStringListModel"
        defaultProperty: "data"
        prototype: "QAbstractListModel"
        exports: ["StringListModel 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "stringList"; revision: 256; type: "QStringList" }
    }
    Component {
        name: "QTabWidget"
        prototype: "QWidget"
        Enum {
            name: "TabPosition"
            values: {
                "North": 0,
                "South": 1,
                "West": 2,
                "East": 3
            }
        }
        Enum {
            name: "TabShape"
            values: {
                "Rounded": 0,
                "Triangular": 1
            }
        }
        Property { name: "tabPosition"; type: "QTabWidget::TabPosition" }
        Property { name: "tabShape"; type: "QTabWidget::TabShape" }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "iconSize"; type: "QSize" }
        Property { name: "elideMode"; type: "Qt::TextElideMode" }
        Property { name: "usesScrollButtons"; type: "bool" }
        Property { name: "documentMode"; type: "bool" }
        Property { name: "tabsClosable"; type: "bool" }
        Property { name: "movable"; type: "bool" }
        Property { name: "tabBarAutoHide"; type: "bool" }
        Signal {
            name: "currentChanged"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "tabCloseRequested"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "tabBarClicked"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "tabBarDoubleClicked"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setCurrentIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setCurrentWidget"
            Parameter { name: "widget"; type: "QWidget"; isPointer: true }
        }
    }
    Component {
        name: "QTableView"
        defaultProperty: "data"
        prototype: "QAbstractItemView"
        exports: ["TableView 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "showGrid"; type: "bool" }
        Property { name: "gridStyle"; type: "Qt::PenStyle" }
        Property { name: "sortingEnabled"; type: "bool" }
        Property { name: "wordWrap"; type: "bool" }
        Property { name: "cornerButtonEnabled"; type: "bool" }
        Method {
            name: "selectRow"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "selectColumn"
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "hideRow"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "hideColumn"
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "showRow"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "showColumn"
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "resizeRowToContents"
            Parameter { name: "row"; type: "int" }
        }
        Method { name: "resizeRowsToContents" }
        Method {
            name: "resizeColumnToContents"
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "resizeColumnsToContents" }
        Method {
            name: "sortByColumn"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "order"; type: "Qt::SortOrder" }
        }
        Method {
            name: "setShowGrid"
            Parameter { name: "show"; type: "bool" }
        }
        Property { name: "horizontalHeader"; revision: 256; type: "QHeaderView"; isPointer: true }
        Property { name: "verticalHeader"; revision: 256; type: "QHeaderView"; isPointer: true }
        Property { name: "model"; revision: 256; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "selectionModel"; revision: 256; type: "QItemSelectionModel"; isPointer: true }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QTextBrowser"
        defaultProperty: "data"
        prototype: "QTextEdit"
        exports: ["TextBrowser 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "source"; type: "QUrl" }
        Property { name: "sourceType"; type: "QTextDocument::ResourceType"; isReadonly: true }
        Property { name: "searchPaths"; type: "QStringList" }
        Property { name: "openExternalLinks"; type: "bool" }
        Property { name: "openLinks"; type: "bool" }
        Signal {
            name: "backwardAvailable"
            Parameter { type: "bool" }
        }
        Signal {
            name: "forwardAvailable"
            Parameter { type: "bool" }
        }
        Signal { name: "historyChanged" }
        Signal {
            name: "sourceChanged"
            Parameter { type: "QUrl" }
        }
        Signal {
            name: "highlighted"
            Parameter { type: "QUrl" }
        }
        Signal {
            name: "anchorClicked"
            Parameter { type: "QUrl" }
        }
        Method {
            name: "setSource"
            Parameter { name: "name"; type: "QUrl" }
            Parameter { name: "type"; type: "QTextDocument::ResourceType" }
        }
        Method {
            name: "setSource"
            Parameter { name: "name"; type: "QUrl" }
        }
        Method { name: "backward" }
        Method { name: "forward" }
        Method { name: "home" }
        Method { name: "reload" }
        Property { name: "modified"; revision: 256; type: "bool"; isReadonly: true }
        Property { name: "document"; revision: 256; type: "QTextDocument"; isPointer: true }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QTextDocument"
        prototype: "QObject"
        Enum {
            name: "MarkdownFeatures"
            values: {
                "MarkdownNoHTML": 96,
                "MarkdownDialectCommonMark": 0,
                "MarkdownDialectGitHub": 1068812
            }
        }
        Enum {
            name: "ResourceType"
            values: {
                "UnknownResource": 0,
                "HtmlResource": 1,
                "ImageResource": 2,
                "StyleSheetResource": 3,
                "MarkdownResource": 4,
                "UserResource": 100
            }
        }
        Property { name: "undoRedoEnabled"; type: "bool" }
        Property { name: "modified"; type: "bool" }
        Property { name: "pageSize"; type: "QSizeF" }
        Property { name: "defaultFont"; type: "QFont" }
        Property { name: "useDesignMetrics"; type: "bool" }
        Property { name: "layoutEnabled"; type: "bool" }
        Property { name: "size"; type: "QSizeF"; isReadonly: true }
        Property { name: "textWidth"; type: "double" }
        Property { name: "blockCount"; type: "int"; isReadonly: true }
        Property { name: "indentWidth"; type: "double" }
        Property { name: "defaultStyleSheet"; type: "string" }
        Property { name: "maximumBlockCount"; type: "int" }
        Property { name: "documentMargin"; type: "double" }
        Property { name: "baseUrl"; type: "QUrl" }
        Signal {
            name: "contentsChange"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "charsRemoved"; type: "int" }
            Parameter { name: "charsAdded"; type: "int" }
        }
        Signal { name: "contentsChanged" }
        Signal {
            name: "undoAvailable"
            Parameter { type: "bool" }
        }
        Signal {
            name: "redoAvailable"
            Parameter { type: "bool" }
        }
        Signal { name: "undoCommandAdded" }
        Signal {
            name: "modificationChanged"
            Parameter { name: "m"; type: "bool" }
        }
        Signal {
            name: "cursorPositionChanged"
            Parameter { name: "cursor"; type: "QTextCursor" }
        }
        Signal {
            name: "blockCountChanged"
            Parameter { name: "newBlockCount"; type: "int" }
        }
        Signal {
            name: "baseUrlChanged"
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal { name: "documentLayoutChanged" }
        Method { name: "undo" }
        Method { name: "redo" }
        Method {
            name: "appendUndoItem"
            Parameter { type: "QAbstractUndoItem"; isPointer: true }
        }
        Method {
            name: "setModified"
            Parameter { name: "m"; type: "bool" }
        }
        Method { name: "setModified" }
    }
    Component {
        name: "QTextEdit"
        defaultProperty: "data"
        prototype: "QAbstractScrollArea"
        exports: ["TextEdit 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "LineWrapMode"
            values: {
                "NoWrap": 0,
                "WidgetWidth": 1,
                "FixedPixelWidth": 2,
                "FixedColumnWidth": 3
            }
        }
        Enum {
            name: "AutoFormatting"
            values: {
                "AutoNone": 0,
                "AutoBulletList": 1,
                "AutoAll": -1
            }
        }
        Property { name: "autoFormatting"; type: "QFlags<QTextEdit::AutoFormattingFlag>" }
        Property { name: "tabChangesFocus"; type: "bool" }
        Property { name: "documentTitle"; type: "string" }
        Property { name: "undoRedoEnabled"; type: "bool" }
        Property { name: "lineWrapMode"; type: "QTextEdit::LineWrapMode" }
        Property { name: "lineWrapColumnOrWidth"; type: "int" }
        Property { name: "readOnly"; type: "bool" }
        Property { name: "markdown"; type: "string" }
        Property { name: "html"; type: "string" }
        Property { name: "plainText"; type: "string" }
        Property { name: "overwriteMode"; type: "bool" }
        Property { name: "tabStopDistance"; type: "double" }
        Property { name: "acceptRichText"; type: "bool" }
        Property { name: "cursorWidth"; type: "int" }
        Property { name: "textInteractionFlags"; type: "QFlags<Qt::TextInteractionFlag>" }
        Property { name: "document"; type: "QTextDocument"; isPointer: true }
        Property { name: "placeholderText"; type: "string" }
        Signal { name: "textChanged" }
        Signal {
            name: "undoAvailable"
            Parameter { name: "b"; type: "bool" }
        }
        Signal {
            name: "redoAvailable"
            Parameter { name: "b"; type: "bool" }
        }
        Signal {
            name: "currentCharFormatChanged"
            Parameter { name: "format"; type: "QTextCharFormat" }
        }
        Signal {
            name: "copyAvailable"
            Parameter { name: "b"; type: "bool" }
        }
        Signal { name: "selectionChanged" }
        Signal { name: "cursorPositionChanged" }
        Method {
            name: "setFontPointSize"
            Parameter { name: "s"; type: "double" }
        }
        Method {
            name: "setFontFamily"
            Parameter { name: "fontFamily"; type: "string" }
        }
        Method {
            name: "setFontWeight"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setFontUnderline"
            Parameter { name: "b"; type: "bool" }
        }
        Method {
            name: "setFontItalic"
            Parameter { name: "b"; type: "bool" }
        }
        Method {
            name: "setTextColor"
            Parameter { name: "c"; type: "QColor" }
        }
        Method {
            name: "setTextBackgroundColor"
            Parameter { name: "c"; type: "QColor" }
        }
        Method {
            name: "setCurrentFont"
            Parameter { name: "f"; type: "QFont" }
        }
        Method {
            name: "setAlignment"
            Parameter { name: "a"; type: "Qt::Alignment" }
        }
        Method {
            name: "setPlainText"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setHtml"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setMarkdown"
            Parameter { name: "markdown"; type: "string" }
        }
        Method {
            name: "setText"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "cut" }
        Method { name: "copy" }
        Method { name: "paste" }
        Method { name: "undo" }
        Method { name: "redo" }
        Method { name: "clear" }
        Method { name: "selectAll" }
        Method {
            name: "insertPlainText"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "insertHtml"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "append"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "scrollToAnchor"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "zoomIn"
            Parameter { name: "range"; type: "int" }
        }
        Method { name: "zoomIn" }
        Method {
            name: "zoomOut"
            Parameter { name: "range"; type: "int" }
        }
        Method { name: "zoomOut" }
        Method {
            name: "loadResource"
            type: "QVariant"
            Parameter { name: "type"; type: "int" }
            Parameter { name: "name"; type: "QUrl" }
        }
        Method {
            name: "inputMethodQuery"
            type: "QVariant"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
        Property { name: "modified"; revision: 256; type: "bool"; isReadonly: true }
        Property { name: "document"; revision: 256; type: "QTextDocument"; isPointer: true }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QTimeEdit"
        defaultProperty: "data"
        prototype: "QDateTimeEdit"
        exports: ["TimeEdit 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "time"; type: "QTime" }
        Signal {
            name: "userTimeChanged"
            Parameter { name: "time"; type: "QTime" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QTimer"
        prototype: "QObject"
        exports: ["Timer 1.0"]

        Property { name: "singleShot"; type: "bool" }
        Property { name: "interval"; type: "int" }
        Property { name: "remainingTime"; type: "int"; isReadonly: true }
        Property { name: "timerType"; type: "Qt::TimerType" }
        Property { name: "active"; type: "bool"; isReadonly: true }
        Signal { name: "timeout" }
        Method {
            name: "start"
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "start" }
        Method { name: "stop" }
    }
    Component {
        name: "QToolBar"
        defaultProperty: "data"
        prototype: "QWidget"
        exports: ["ToolBar 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "movable"; type: "bool" }
        Property { name: "allowedAreas"; type: "QFlags<Qt::ToolBarArea>" }
        Property { name: "orientation"; type: "Qt::Orientation" }
        Property { name: "iconSize"; type: "QSize" }
        Property { name: "toolButtonStyle"; type: "Qt::ToolButtonStyle" }
        Property { name: "floating"; type: "bool"; isReadonly: true }
        Property { name: "floatable"; type: "bool" }
        Signal {
            name: "actionTriggered"
            Parameter { name: "action"; type: "QAction"; isPointer: true }
        }
        Signal {
            name: "movableChanged"
            Parameter { name: "movable"; type: "bool" }
        }
        Signal {
            name: "allowedAreasChanged"
            Parameter { name: "allowedAreas"; type: "Qt::ToolBarAreas" }
        }
        Signal {
            name: "orientationChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Signal {
            name: "iconSizeChanged"
            Parameter { name: "iconSize"; type: "QSize" }
        }
        Signal {
            name: "toolButtonStyleChanged"
            Parameter { name: "toolButtonStyle"; type: "Qt::ToolButtonStyle" }
        }
        Signal {
            name: "topLevelChanged"
            Parameter { name: "topLevel"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setIconSize"
            Parameter { name: "iconSize"; type: "QSize" }
        }
        Method {
            name: "setToolButtonStyle"
            Parameter { name: "toolButtonStyle"; type: "Qt::ToolButtonStyle" }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QToolButton"
        defaultProperty: "data"
        prototype: "QAbstractButton"
        exports: ["ToolButton 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "ToolButtonPopupMode"
            values: {
                "DelayedPopup": 0,
                "MenuButtonPopup": 1,
                "InstantPopup": 2
            }
        }
        Property { name: "popupMode"; type: "QToolButton::ToolButtonPopupMode" }
        Property { name: "toolButtonStyle"; type: "Qt::ToolButtonStyle" }
        Property { name: "autoRaise"; type: "bool" }
        Property { name: "arrowType"; type: "Qt::ArrowType" }
        Signal {
            name: "triggered"
            Parameter { type: "QAction"; isPointer: true }
        }
        Method { name: "showMenu" }
        Method {
            name: "setToolButtonStyle"
            Parameter { name: "style"; type: "Qt::ToolButtonStyle" }
        }
        Method {
            name: "setDefaultAction"
            Parameter { type: "QAction"; isPointer: true }
        }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QTreeView"
        defaultProperty: "data"
        prototype: "QAbstractItemView"
        exports: ["TreeView 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "autoExpandDelay"; type: "int" }
        Property { name: "indentation"; type: "int" }
        Property { name: "rootIsDecorated"; type: "bool" }
        Property { name: "uniformRowHeights"; type: "bool" }
        Property { name: "itemsExpandable"; type: "bool" }
        Property { name: "sortingEnabled"; type: "bool" }
        Property { name: "animated"; type: "bool" }
        Property { name: "allColumnsShowFocus"; type: "bool" }
        Property { name: "wordWrap"; type: "bool" }
        Property { name: "headerHidden"; type: "bool" }
        Property { name: "expandsOnDoubleClick"; type: "bool" }
        Signal {
            name: "expanded"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "collapsed"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "hideColumn"
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "showColumn"
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "expand"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "collapse"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "resizeColumnToContents"
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "sortByColumn"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "order"; type: "Qt::SortOrder" }
        }
        Method { name: "expandAll" }
        Method {
            name: "expandRecursively"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "depth"; type: "int" }
        }
        Method {
            name: "expandRecursively"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method { name: "collapseAll" }
        Method {
            name: "expandToDepth"
            Parameter { name: "depth"; type: "int" }
        }
        Property { name: "header"; revision: 256; type: "QHeaderView"; isPointer: true }
        Property { name: "model"; revision: 256; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "selectionModel"; revision: 256; type: "QItemSelectionModel"; isPointer: true }
        Property { name: "itemDelegate"; revision: 256; type: "QAbstractItemDelegate"; isPointer: true }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
    }
    Component { name: "QVBoxLayout"; prototype: "QBoxLayout" }
    Component {
        name: "QWidget"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["Widget 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "modal"; type: "bool"; isReadonly: true }
        Property { name: "windowModality"; type: "Qt::WindowModality" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "geometry"; type: "QRect" }
        Property { name: "frameGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "normalGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "x"; type: "int"; isReadonly: true }
        Property { name: "y"; type: "int"; isReadonly: true }
        Property { name: "pos"; type: "QPoint" }
        Property { name: "frameSize"; type: "QSize"; isReadonly: true }
        Property { name: "size"; type: "QSize" }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "rect"; type: "QRect"; isReadonly: true }
        Property { name: "childrenRect"; type: "QRect"; isReadonly: true }
        Property { name: "childrenRegion"; type: "QRegion"; isReadonly: true }
        Property { name: "sizePolicy"; type: "QSizePolicy" }
        Property { name: "minimumSize"; type: "QSize" }
        Property { name: "maximumSize"; type: "QSize" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "sizeIncrement"; type: "QSize" }
        Property { name: "baseSize"; type: "QSize" }
        Property { name: "palette"; type: "QPalette" }
        Property { name: "font"; type: "QFont" }
        Property { name: "cursor"; type: "QCursor" }
        Property { name: "mouseTracking"; type: "bool" }
        Property { name: "tabletTracking"; type: "bool" }
        Property { name: "isActiveWindow"; type: "bool"; isReadonly: true }
        Property { name: "focusPolicy"; type: "Qt::FocusPolicy" }
        Property { name: "focus"; type: "bool"; isReadonly: true }
        Property { name: "contextMenuPolicy"; type: "Qt::ContextMenuPolicy" }
        Property { name: "updatesEnabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "minimized"; type: "bool"; isReadonly: true }
        Property { name: "maximized"; type: "bool"; isReadonly: true }
        Property { name: "fullScreen"; type: "bool"; isReadonly: true }
        Property { name: "sizeHint"; type: "QSize"; isReadonly: true }
        Property { name: "minimumSizeHint"; type: "QSize"; isReadonly: true }
        Property { name: "acceptDrops"; type: "bool" }
        Property { name: "windowTitle"; type: "string" }
        Property { name: "windowIcon"; type: "QIcon" }
        Property { name: "windowIconText"; type: "string" }
        Property { name: "windowOpacity"; type: "double" }
        Property { name: "windowModified"; type: "bool" }
        Property { name: "toolTip"; type: "string" }
        Property { name: "toolTipDuration"; type: "int" }
        Property { name: "statusTip"; type: "string" }
        Property { name: "whatsThis"; type: "string" }
        Property { name: "accessibleName"; type: "string" }
        Property { name: "accessibleDescription"; type: "string" }
        Property { name: "layoutDirection"; type: "Qt::LayoutDirection" }
        Property { name: "autoFillBackground"; type: "bool" }
        Property { name: "styleSheet"; type: "string" }
        Property { name: "locale"; type: "QLocale" }
        Property { name: "windowFilePath"; type: "string" }
        Property { name: "inputMethodHints"; type: "QFlags<Qt::InputMethodHint>" }
        Signal {
            name: "windowTitleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "windowIconChanged"
            Parameter { name: "icon"; type: "QIcon" }
        }
        Signal {
            name: "windowIconTextChanged"
            Parameter { name: "iconText"; type: "string" }
        }
        Signal {
            name: "customContextMenuRequested"
            Parameter { name: "pos"; type: "QPoint" }
        }
        Method {
            name: "setEnabled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setDisabled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setWindowModified"
            Parameter { type: "bool" }
        }
        Method {
            name: "setWindowTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setStyleSheet"
            Parameter { name: "styleSheet"; type: "string" }
        }
        Method { name: "setFocus" }
        Method { name: "update" }
        Method { name: "repaint" }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setHidden"
            Parameter { name: "hidden"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "grab"
            type: "QPixmap"
            Parameter { name: "rectangle"; type: "QRect" }
        }
        Method { name: "grab"; type: "QPixmap" }
        Property { name: "data"; revision: 256; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "x"; revision: 256; type: "int" }
        Property { name: "y"; revision: 256; type: "int" }
        Property { name: "width"; revision: 256; type: "int" }
        Property { name: "height"; revision: 256; type: "int" }
        Property { name: "geometry"; revision: 256; type: "QRect" }
        Property { name: "visible"; revision: 256; type: "bool" }
        Property {
            name: "sizePolicy"
            revision: 256
            type: "DeclarativeSizePolicy"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "StaticDialogMethodAttached"
        prototype: "QObject"
        Property { name: "parent"; type: "QObject"; isPointer: true }
        Signal {
            name: "dialogParentChanged"
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
    }
}
